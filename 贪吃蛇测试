class Point:
  row=0
  col=0
  def __init__(self, row, col):
    self.row=row
    self.col=col

  def copy(self):
    return Point(row=self.row, col=self.col)


#初始框架
import pygame
import random

#初始化
pygame.init()
W=800
H=600

ROW=30
COL=40

size=(W,H)
window=pygame.display.set_mode(size)
pygame.display.set_caption('贪吃蛇')

bg_color=(255,255,255)
snake_color=(200,200,200)

head=Point(row=int(ROW/2), col=int(COL/2))
head_color=(0,128,128)

snakes=[
  Point(row=head.row, col=head.col+1),
  Point(row=head.row, col=head.col+2),
  Point(row=head.row, col=head.col+3)
]

# 加载背景图片并将其调整至与窗口相同大小
background_image = pygame.transform.scale(pygame.image.load('background.jpg'), (W, H))
game_over_image = pygame.transform.scale(pygame.image.load('game_over.jpg'), (W, H))
font = pygame.font.Font(None, 48)
#生成食物
def gen_food():
  while 1:
    pos=Point(row=random.randint(0,ROW-1), col=random.randint(0,COL-1))

    #
    is_coll=False

    #是否跟蛇碰上了
    if head.row==pos.row and head.col==pos.col:
      is_coll=True

    #蛇身子
    for snake in snakes:
      if snake.row==pos.row and snake.col==pos.col:
        is_coll=True
        break

    if not is_coll:
      break

  return pos


#定义坐标


food=gen_food()
food_color=(255,0,0)



direct='left'       #left,right,up,down

#
def rect(point, color):
  cell_width=W/COL
  cell_height=H/ROW

  left=point.col*cell_width
  top=point.row*cell_height

  pygame.draw.rect(
    window, color,
    (left, top, cell_width, cell_height)
  )
  pass

#游戏循环
quit=True
clock=pygame.time.Clock()
while quit:
  #处理事件
  for event in pygame.event.get():
    if event.type==pygame.QUIT:
      quit=False
    elif event.type==pygame.KEYDOWN:
      if event.key==pygame.K_UP:
        if direct=='left' or direct=='right':
          direct='up'
      elif event.key==pygame.K_DOWN:
        if direct == 'left' or direct == 'right':
          direct='down'
      elif event.key==pygame.K_LEFT:
        if direct == 'up' or direct == 'down':
          direct='left'
      elif event.key==pygame.K_RIGHT:
        if direct == 'up' or direct == 'down':
          direct='right'


  #吃东西
  eat=(head.row==food.row and head.col==food.col)

  #重新产生食物
  if eat:
    food = gen_food()

  #处理身子
  #1.把原来的头，插入到snakes的头上
  snakes.insert(0, head.copy())
  #2.把snakes的最后一个删掉
  if not eat:
    snakes.pop()

  #移动
  if direct=='left':
    head.col-=1
  elif direct=='right':
    head.col+=1
  elif direct=='up':
    head.row-=1
  elif direct=='down':
    head.row+=1

  #检测
  dead=False
  #1.撞墙
  if head.col<0 or head.row<0 or head.col>=COL or head.row>=ROW:
    dead=True

  #2.撞自己
  for snake in snakes:
    if head.col==snake.col and head.row==snake.row:
      dead=True
      break
          
  # 绘制背景图片
  window.blit(background_image, (0, 0))

  if dead:
    window.blit(game_over_image, (0, 0))
    text = font.render('GAME OVER', True, (255, 255, 255))
    window.blit(text, ((W - text.get_width()) // 2, (H - text.get_height()) // 2))

    keys = pygame.key.get_pressed()
    if keys[pygame.K_RETURN]:
      # 重置游戏
      head = Point(row=int(ROW / 2), col=int(COL / 2))
      snakes = [
        Point(row=head.row, col=head.col + 1),
        Point(row=head.row, col=head.col + 2),
        Point(row=head.row, col=head.col + 3)
      ]
      food = gen_food()
      direct = 'left'





  #蛇头
  for snake in snakes:
   rect(snake, snake_color)
  rect(head, head_color)
  rect(food, food_color)

  #
  pygame.display.flip()

  #设置帧频
  clock.tick(10)

#收尾工作
